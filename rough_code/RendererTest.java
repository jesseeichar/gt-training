import com.vividsolutions.jts.geom.Envelope;
import org.apache.batik.svggen.SVGGeneratorContext;
import org.apache.batik.svggen.SVGGraphics2D;
import org.geotools.data.FeatureSource;
import org.geotools.data.FileDataStore;
import org.geotools.data.shapefile.ShapefileDataStoreFactory;
import org.geotools.data.simple.SimpleFeatureSource;
import org.geotools.gce.geotiff.GeoTiffFormat;
import org.geotools.gce.geotiff.GeoTiffReader;
import org.geotools.geometry.jts.ReferencedEnvelope;
import org.geotools.map.*;
import org.geotools.map.direct.MessageDirectLayer;
import org.geotools.referencing.crs.DefaultGeographicCRS;
import org.geotools.renderer.lite.StreamingRenderer;
import org.geotools.styling.LineSymbolizer;
import org.geotools.styling.RasterSymbolizer;
import org.geotools.styling.Style;
import org.geotools.styling.StyleBuilder;
import org.geotools.swing.JMapFrame;
import org.junit.Test;
import org.w3c.dom.Document;

import javax.imageio.ImageIO;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerConfigurationException;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import java.awt.*;
import java.awt.image.BufferedImage;
import java.io.*;
import java.net.URL;

/**
 * User: Jesse
 * Date: 10/2/13
 * Time: 10:01 AM
 */
public class RendererTest {


    @Test
    public void testRendering() throws Exception {
        StreamingRenderer renderer = new StreamingRenderer();

        MapContent context = new MapContent();
        SimpleFeatureSource featureSource = getFeatureSource();
        Style style = getStyle(featureSource);
        Layer layer = new FeatureLayer(featureSource, style);
//        context.addLayer(layer);
        Layer coverageLayer = new GridReaderLayer(createReader(), getRasterStyle());
//
//        MessageDirectLayer messageLayer = new MessageDirectLayer("Good morning :-)");
//        messageLayer.getUserData().put("color", Color.RED);
        context.addLayer(coverageLayer);
//        context.addLayer(messageLayer);
//        renderer.setMapContent(context);

//        renderToImage(renderer, context);

//        renderToSVG(renderer, context);

        drawInSwingApp(context);
    }

    private void drawInSwingApp(MapContent context) throws InterruptedException {
        JMapFrame mapFrame = new JMapFrame(context);

        mapFrame.enableToolBar(true);
        mapFrame.enableStatusBar(true);
        mapFrame.enableLayerTable(true);

        mapFrame.setSize(600, 600);
        mapFrame.setVisible(true);
        mapFrame.setState(JMapFrame.EXIT_ON_CLOSE);

        Thread.sleep(1000000);
    }

    private void renderToSVG(StreamingRenderer renderer, MapContent context) throws ParserConfigurationException, TransformerException, IOException {
        DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
        DocumentBuilder db = dbf.newDocumentBuilder();

        // Create an instance of org.w3c.dom.Document
        Document document = db.getDOMImplementation().createDocument(null, "svg", null);

        // Set up the map
        SVGGeneratorContext ctx1 = SVGGeneratorContext.createDefault(document);
        SVGGeneratorContext ctx = ctx1;
        ctx.setComment("Generated by GeoTools2 with Batik SVG Generator");

        SVGGraphics2D g2d = new SVGGraphics2D(ctx, true);

        try (OutputStreamWriter osw = new OutputStreamWriter(new FileOutputStream("renderedLayer.svg"), "UTF-8")){

            g2d.setRenderingHints(new RenderingHints(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_OFF));

            int width = 1024;
            int height = 768;
            g2d.setColor(Color.black);
            g2d.fillRect(0,0,width, height);

            Dimension canvasSize = new Dimension(width, height);
            g2d.setSVGCanvasSize(canvasSize);

            Rectangle paintArea = new Rectangle(width, height);
            ReferencedEnvelope mapArea = context.getMaxBounds();
            renderer.paint(g2d, paintArea, mapArea);

            g2d.stream(osw);

        } finally {
            if (g2d != null) {
                g2d.dispose();
            }
        }
    }

    private void renderToImage(StreamingRenderer renderer, MapContent context) throws IOException {
        int width = 1024;
        int height = 768;
        BufferedImage image = new BufferedImage(width, height, BufferedImage.TYPE_4BYTE_ABGR);
        Graphics2D g2d = null;

        try {
            g2d = image.createGraphics();

            g2d.setRenderingHints(new RenderingHints(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_OFF));

            g2d.setColor(new Color(100,100,0,150));
            g2d.fillRect(0,0,width,height);
            Rectangle paintArea = new Rectangle(width, height);
            ReferencedEnvelope mapArea = context.getMaxBounds();
            renderer.paint(g2d, paintArea, mapArea);
        } finally {
            if (g2d != null) {
                g2d.dispose();
            }
        }

        ImageIO.write(image, "png", new File("renderedImage.png"));
    }

    private GeoTiffReader createReader() {
        GeoTiffFormat format = new GeoTiffFormat();
        return format.getReader(new File("E:\\GeographicData\\geotiff\\bogota.tif"));
    }

    public Style getRasterStyle() {
        StyleBuilder builder = new StyleBuilder();
        final RasterSymbolizer rasterSymbolizer = builder.createRasterSymbolizer();
        return builder.createStyle(rasterSymbolizer);
    }
    private Style getStyle(FeatureSource featureSource) {
        StyleBuilder builder = new StyleBuilder();
        final LineSymbolizer lineSymbolizer = builder.createLineSymbolizer(Color.RED);
        return builder.createStyle(featureSource.getName().getLocalPart(), lineSymbolizer);
    }

    public SimpleFeatureSource getFeatureSource() throws Exception {
        final URL url = new File("newFrance.shp").toURI().toURL();
        final FileDataStore dataStore = new ShapefileDataStoreFactory().createDataStore(url);
        return dataStore.getFeatureSource();
    }

}
